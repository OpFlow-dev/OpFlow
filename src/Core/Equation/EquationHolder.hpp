//  ----------------------------------------------------------------------------
//
//  Copyright (c) 2019 - 2022 by the OpFlow developers
//
//  This file is part of OpFlow.
//
//  OpFlow is free software and is distributed under the MPL v2.0 license.
//  The full text of the license can be found in the file LICENSE at the top
//  level directory of OpFlow.
//
//  ----------------------------------------------------------------------------
//  Note: This file is generated by script in "script/codegen.py". Modify the
//        script rather than this file if you need to.
//  ----------------------------------------------------------------------------

#ifndef OPFLOW_EQUATIONHOLDER_HPP
#define OPFLOW_EQUATIONHOLDER_HPP

#include "Core/Meta.hpp"
#include "DataStructures/StencilPad.hpp"
#include <functional>
#include <unordered_map>

namespace OpFlow {
    template <typename... E>
    struct EqnHolder;

    template <typename E1, typename T1>
    struct EqnHolder<E1, T1> {
        constexpr static int size = 1;
        T1* target1;
        using st_field_type1 = Meta::RealType<decltype(target1->template getStencilField<DS::fake_map>())>;
        using getter_type1 = std::function<E1(st_field_type1&)>;
        std::unique_ptr<st_field_type1> stField1;
        getter_type1 getter1;

        EqnHolder(getter_type1 getter1, T1& target1) : getter1(getter1), target1(&target1) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<DS::fake_map>(1));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& target1) {
        return EqnHolder<Meta::RealType<decltype(func1(target1.template getStencilField<DS::fake_map>()))>,
                         Meta::RealType<decltype(target1)>>(func1, target1);
    }

    template <typename E1, typename E2, typename T1, typename T2>
    struct EqnHolder<E1, E2, T1, T2> {
        constexpr static int size = 2;
        T1* target1;
        T2* target2;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using getter_type1 = std::function<E1(st_field_type1&, st_field_type2&)>;
        using getter_type2 = std::function<E2(st_field_type1&, st_field_type2&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        getter_type1 getter1;
        getter_type2 getter2;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, T1& target1, T2& target2)
            : getter1(getter1), getter2(getter2), target1(&target1), target2(&target2) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& target1, auto&& target2) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>>(func1, func2, target1,
                                                                                      target2);
    }

    template <typename E1, typename E2, typename E3, typename T1, typename T2, typename T3>
    struct EqnHolder<E1, E2, E3, T1, T2, T3> {
        constexpr static int size = 3;
        T1* target1;
        T2* target2;
        T3* target3;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using getter_type1 = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&)>;
        using getter_type2 = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&)>;
        using getter_type3 = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, T1& target1, T2& target2,
                  T3& target3)
            : getter1(getter1), getter2(getter2), getter3(getter3), target1(&target1), target2(&target2),
              target3(&target3) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& target1, auto&& target2,
                       auto&& target3) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>>(func1, func2, func3, target1, target2, target3);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename T1, typename T2, typename T3,
              typename T4>
    struct EqnHolder<E1, E2, E3, E4, T1, T2, T3, T4> {
        constexpr static int size = 4;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using getter_type1
                = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&)>;
        using getter_type2
                = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&)>;
        using getter_type3
                = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&)>;
        using getter_type4
                = std::function<E4(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  T1& target1, T2& target2, T3& target3, T4& target4)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), target1(&target1),
              target2(&target2), target3(&target3), target4(&target4) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& target1, auto&& target2,
                       auto&& target3, auto&& target4) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>>(
                func1, func2, func3, func4, target1, target2, target3, target4);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename T1, typename T2,
              typename T3, typename T4, typename T5>
    struct EqnHolder<E1, E2, E3, E4, E5, T1, T2, T3, T4, T5> {
        constexpr static int size = 5;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using st_field_type5
                = Meta::RealType<decltype(target5->template getStencilField<std::unordered_map>())>;
        using getter_type1 = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&)>;
        using getter_type2 = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&)>;
        using getter_type3 = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&)>;
        using getter_type4 = std::function<E4(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&)>;
        using getter_type5 = std::function<E5(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        std::unique_ptr<st_field_type5> stField5;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;
        getter_type5 getter5;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  getter_type5 getter5, T1& target1, T2& target2, T3& target3, T4& target4, T5& target5)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), getter5(getter5),
              target1(&target1), target2(&target2), target3(&target3), target4(&target4), target5(&target5) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
            stField5 = std::make_unique<st_field_type5>(
                    this->target5->template getStencilField<std::unordered_map>(5));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4, *stField5);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4, *stField5);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4, *stField5);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4, *stField5);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 5) {
                auto eqn = getter5(*stField1, *stField2, *stField3, *stField4, *stField5);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& func5, auto&& target1,
                       auto&& target2, auto&& target3, auto&& target4, auto&& target5) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func5(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>,
                Meta::RealType<decltype(target5)>>(func1, func2, func3, func4, func5, target1, target2,
                                                   target3, target4, target5);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename T1,
              typename T2, typename T3, typename T4, typename T5, typename T6>
    struct EqnHolder<E1, E2, E3, E4, E5, E6, T1, T2, T3, T4, T5, T6> {
        constexpr static int size = 6;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using st_field_type5
                = Meta::RealType<decltype(target5->template getStencilField<std::unordered_map>())>;
        using st_field_type6
                = Meta::RealType<decltype(target6->template getStencilField<std::unordered_map>())>;
        using getter_type1 = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&)>;
        using getter_type2 = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&)>;
        using getter_type3 = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&)>;
        using getter_type4 = std::function<E4(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&)>;
        using getter_type5 = std::function<E5(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&)>;
        using getter_type6 = std::function<E6(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        std::unique_ptr<st_field_type5> stField5;
        std::unique_ptr<st_field_type6> stField6;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;
        getter_type5 getter5;
        getter_type6 getter6;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  getter_type5 getter5, getter_type6 getter6, T1& target1, T2& target2, T3& target3,
                  T4& target4, T5& target5, T6& target6)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), getter5(getter5),
              getter6(getter6), target1(&target1), target2(&target2), target3(&target3), target4(&target4),
              target5(&target5), target6(&target6) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
            stField5 = std::make_unique<st_field_type5>(
                    this->target5->template getStencilField<std::unordered_map>(5));
            stField6 = std::make_unique<st_field_type6>(
                    this->target6->template getStencilField<std::unordered_map>(6));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 5) {
                auto eqn = getter5(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 6) {
                auto eqn = getter6(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& func5, auto&& func6,
                       auto&& target1, auto&& target2, auto&& target3, auto&& target4, auto&& target5,
                       auto&& target6) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func5(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func6(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>,
                Meta::RealType<decltype(target5)>, Meta::RealType<decltype(target6)>>(
                func1, func2, func3, func4, func5, func6, target1, target2, target3, target4, target5,
                target6);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    struct EqnHolder<E1, E2, E3, E4, E5, E6, E7, T1, T2, T3, T4, T5, T6, T7> {
        constexpr static int size = 7;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using st_field_type5
                = Meta::RealType<decltype(target5->template getStencilField<std::unordered_map>())>;
        using st_field_type6
                = Meta::RealType<decltype(target6->template getStencilField<std::unordered_map>())>;
        using st_field_type7
                = Meta::RealType<decltype(target7->template getStencilField<std::unordered_map>())>;
        using getter_type1
                = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        using getter_type2
                = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        using getter_type3
                = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        using getter_type4
                = std::function<E4(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        using getter_type5
                = std::function<E5(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        using getter_type6
                = std::function<E6(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        using getter_type7
                = std::function<E7(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        std::unique_ptr<st_field_type5> stField5;
        std::unique_ptr<st_field_type6> stField6;
        std::unique_ptr<st_field_type7> stField7;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;
        getter_type5 getter5;
        getter_type6 getter6;
        getter_type7 getter7;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  getter_type5 getter5, getter_type6 getter6, getter_type7 getter7, T1& target1, T2& target2,
                  T3& target3, T4& target4, T5& target5, T6& target6, T7& target7)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), getter5(getter5),
              getter6(getter6), getter7(getter7), target1(&target1), target2(&target2), target3(&target3),
              target4(&target4), target5(&target5), target6(&target6), target7(&target7) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
            stField5 = std::make_unique<st_field_type5>(
                    this->target5->template getStencilField<std::unordered_map>(5));
            stField6 = std::make_unique<st_field_type6>(
                    this->target6->template getStencilField<std::unordered_map>(6));
            stField7 = std::make_unique<st_field_type7>(
                    this->target7->template getStencilField<std::unordered_map>(7));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 5) {
                auto eqn = getter5(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 6) {
                auto eqn = getter6(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 7) {
                auto eqn = getter7(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& func5, auto&& func6,
                       auto&& func7, auto&& target1, auto&& target2, auto&& target3, auto&& target4,
                       auto&& target5, auto&& target6, auto&& target7) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func5(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func6(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func7(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>,
                Meta::RealType<decltype(target5)>, Meta::RealType<decltype(target6)>,
                Meta::RealType<decltype(target7)>>(func1, func2, func3, func4, func5, func6, func7, target1,
                                                   target2, target3, target4, target5, target6, target7);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6,
              typename T7, typename T8>
    struct EqnHolder<E1, E2, E3, E4, E5, E6, E7, E8, T1, T2, T3, T4, T5, T6, T7, T8> {
        constexpr static int size = 8;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        T8* target8;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using st_field_type5
                = Meta::RealType<decltype(target5->template getStencilField<std::unordered_map>())>;
        using st_field_type6
                = Meta::RealType<decltype(target6->template getStencilField<std::unordered_map>())>;
        using st_field_type7
                = Meta::RealType<decltype(target7->template getStencilField<std::unordered_map>())>;
        using st_field_type8
                = Meta::RealType<decltype(target8->template getStencilField<std::unordered_map>())>;
        using getter_type1
                = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type2
                = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type3
                = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type4
                = std::function<E4(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type5
                = std::function<E5(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type6
                = std::function<E6(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type7
                = std::function<E7(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        using getter_type8
                = std::function<E8(st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&,
                                   st_field_type5&, st_field_type6&, st_field_type7&, st_field_type8&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        std::unique_ptr<st_field_type5> stField5;
        std::unique_ptr<st_field_type6> stField6;
        std::unique_ptr<st_field_type7> stField7;
        std::unique_ptr<st_field_type8> stField8;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;
        getter_type5 getter5;
        getter_type6 getter6;
        getter_type7 getter7;
        getter_type8 getter8;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  getter_type5 getter5, getter_type6 getter6, getter_type7 getter7, getter_type8 getter8,
                  T1& target1, T2& target2, T3& target3, T4& target4, T5& target5, T6& target6, T7& target7,
                  T8& target8)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), getter5(getter5),
              getter6(getter6), getter7(getter7), getter8(getter8), target1(&target1), target2(&target2),
              target3(&target3), target4(&target4), target5(&target5), target6(&target6), target7(&target7),
              target8(&target8) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
            stField5 = std::make_unique<st_field_type5>(
                    this->target5->template getStencilField<std::unordered_map>(5));
            stField6 = std::make_unique<st_field_type6>(
                    this->target6->template getStencilField<std::unordered_map>(6));
            stField7 = std::make_unique<st_field_type7>(
                    this->target7->template getStencilField<std::unordered_map>(7));
            stField8 = std::make_unique<st_field_type8>(
                    this->target8->template getStencilField<std::unordered_map>(8));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 5) {
                auto eqn = getter5(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 6) {
                auto eqn = getter6(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 7) {
                auto eqn = getter7(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 8) {
                auto eqn = getter8(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
            if constexpr (i == 8) return target8;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& func5, auto&& func6,
                       auto&& func7, auto&& func8, auto&& target1, auto&& target2, auto&& target3,
                       auto&& target4, auto&& target5, auto&& target6, auto&& target7, auto&& target8) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func5(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func6(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func7(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func8(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>,
                Meta::RealType<decltype(target5)>, Meta::RealType<decltype(target6)>,
                Meta::RealType<decltype(target7)>, Meta::RealType<decltype(target8)>>(
                func1, func2, func3, func4, func5, func6, func7, func8, target1, target2, target3, target4,
                target5, target6, target7, target8);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename E9, typename T1, typename T2, typename T3, typename T4, typename T5,
              typename T6, typename T7, typename T8, typename T9>
    struct EqnHolder<E1, E2, E3, E4, E5, E6, E7, E8, E9, T1, T2, T3, T4, T5, T6, T7, T8, T9> {
        constexpr static int size = 9;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        T8* target8;
        T9* target9;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using st_field_type5
                = Meta::RealType<decltype(target5->template getStencilField<std::unordered_map>())>;
        using st_field_type6
                = Meta::RealType<decltype(target6->template getStencilField<std::unordered_map>())>;
        using st_field_type7
                = Meta::RealType<decltype(target7->template getStencilField<std::unordered_map>())>;
        using st_field_type8
                = Meta::RealType<decltype(target8->template getStencilField<std::unordered_map>())>;
        using st_field_type9
                = Meta::RealType<decltype(target9->template getStencilField<std::unordered_map>())>;
        using getter_type1 = std::function<E1(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type2 = std::function<E2(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type3 = std::function<E3(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type4 = std::function<E4(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type5 = std::function<E5(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type6 = std::function<E6(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type7 = std::function<E7(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type8 = std::function<E8(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        using getter_type9 = std::function<E9(st_field_type1&, st_field_type2&, st_field_type3&,
                                              st_field_type4&, st_field_type5&, st_field_type6&,
                                              st_field_type7&, st_field_type8&, st_field_type9&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        std::unique_ptr<st_field_type5> stField5;
        std::unique_ptr<st_field_type6> stField6;
        std::unique_ptr<st_field_type7> stField7;
        std::unique_ptr<st_field_type8> stField8;
        std::unique_ptr<st_field_type9> stField9;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;
        getter_type5 getter5;
        getter_type6 getter6;
        getter_type7 getter7;
        getter_type8 getter8;
        getter_type9 getter9;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  getter_type5 getter5, getter_type6 getter6, getter_type7 getter7, getter_type8 getter8,
                  getter_type9 getter9, T1& target1, T2& target2, T3& target3, T4& target4, T5& target5,
                  T6& target6, T7& target7, T8& target8, T9& target9)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), getter5(getter5),
              getter6(getter6), getter7(getter7), getter8(getter8), getter9(getter9), target1(&target1),
              target2(&target2), target3(&target3), target4(&target4), target5(&target5), target6(&target6),
              target7(&target7), target8(&target8), target9(&target9) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
            stField5 = std::make_unique<st_field_type5>(
                    this->target5->template getStencilField<std::unordered_map>(5));
            stField6 = std::make_unique<st_field_type6>(
                    this->target6->template getStencilField<std::unordered_map>(6));
            stField7 = std::make_unique<st_field_type7>(
                    this->target7->template getStencilField<std::unordered_map>(7));
            stField8 = std::make_unique<st_field_type8>(
                    this->target8->template getStencilField<std::unordered_map>(8));
            stField9 = std::make_unique<st_field_type9>(
                    this->target9->template getStencilField<std::unordered_map>(9));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 5) {
                auto eqn = getter5(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 6) {
                auto eqn = getter6(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 7) {
                auto eqn = getter7(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 8) {
                auto eqn = getter8(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 9) {
                auto eqn = getter9(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
            if constexpr (i == 8) return target8;
            if constexpr (i == 9) return target9;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& func5, auto&& func6,
                       auto&& func7, auto&& func8, auto&& func9, auto&& target1, auto&& target2,
                       auto&& target3, auto&& target4, auto&& target5, auto&& target6, auto&& target7,
                       auto&& target8, auto&& target9) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func5(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func6(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func7(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func8(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func9(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>,
                Meta::RealType<decltype(target5)>, Meta::RealType<decltype(target6)>,
                Meta::RealType<decltype(target7)>, Meta::RealType<decltype(target8)>,
                Meta::RealType<decltype(target9)>>(func1, func2, func3, func4, func5, func6, func7, func8,
                                                   func9, target1, target2, target3, target4, target5,
                                                   target6, target7, target8, target9);
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename E9, typename E10, typename T1, typename T2, typename T3, typename T4,
              typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
    struct EqnHolder<E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
        constexpr static int size = 10;
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        T8* target8;
        T9* target9;
        T10* target10;
        using st_field_type1
                = Meta::RealType<decltype(target1->template getStencilField<std::unordered_map>())>;
        using st_field_type2
                = Meta::RealType<decltype(target2->template getStencilField<std::unordered_map>())>;
        using st_field_type3
                = Meta::RealType<decltype(target3->template getStencilField<std::unordered_map>())>;
        using st_field_type4
                = Meta::RealType<decltype(target4->template getStencilField<std::unordered_map>())>;
        using st_field_type5
                = Meta::RealType<decltype(target5->template getStencilField<std::unordered_map>())>;
        using st_field_type6
                = Meta::RealType<decltype(target6->template getStencilField<std::unordered_map>())>;
        using st_field_type7
                = Meta::RealType<decltype(target7->template getStencilField<std::unordered_map>())>;
        using st_field_type8
                = Meta::RealType<decltype(target8->template getStencilField<std::unordered_map>())>;
        using st_field_type9
                = Meta::RealType<decltype(target9->template getStencilField<std::unordered_map>())>;
        using st_field_type10
                = Meta::RealType<decltype(target10->template getStencilField<std::unordered_map>())>;
        using getter_type1 = std::function<E1(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type2 = std::function<E2(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type3 = std::function<E3(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type4 = std::function<E4(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type5 = std::function<E5(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type6 = std::function<E6(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type7 = std::function<E7(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type8 = std::function<E8(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type9 = std::function<E9(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        using getter_type10 = std::function<E10(
                st_field_type1&, st_field_type2&, st_field_type3&, st_field_type4&, st_field_type5&,
                st_field_type6&, st_field_type7&, st_field_type8&, st_field_type9&, st_field_type10&)>;
        std::unique_ptr<st_field_type1> stField1;
        std::unique_ptr<st_field_type2> stField2;
        std::unique_ptr<st_field_type3> stField3;
        std::unique_ptr<st_field_type4> stField4;
        std::unique_ptr<st_field_type5> stField5;
        std::unique_ptr<st_field_type6> stField6;
        std::unique_ptr<st_field_type7> stField7;
        std::unique_ptr<st_field_type8> stField8;
        std::unique_ptr<st_field_type9> stField9;
        std::unique_ptr<st_field_type10> stField10;
        getter_type1 getter1;
        getter_type2 getter2;
        getter_type3 getter3;
        getter_type4 getter4;
        getter_type5 getter5;
        getter_type6 getter6;
        getter_type7 getter7;
        getter_type8 getter8;
        getter_type9 getter9;
        getter_type10 getter10;

        EqnHolder(getter_type1 getter1, getter_type2 getter2, getter_type3 getter3, getter_type4 getter4,
                  getter_type5 getter5, getter_type6 getter6, getter_type7 getter7, getter_type8 getter8,
                  getter_type9 getter9, getter_type10 getter10, T1& target1, T2& target2, T3& target3,
                  T4& target4, T5& target5, T6& target6, T7& target7, T8& target8, T9& target9, T10& target10)
            : getter1(getter1), getter2(getter2), getter3(getter3), getter4(getter4), getter5(getter5),
              getter6(getter6), getter7(getter7), getter8(getter8), getter9(getter9), getter10(getter10),
              target1(&target1), target2(&target2), target3(&target3), target4(&target4), target5(&target5),
              target6(&target6), target7(&target7), target8(&target8), target9(&target9),
              target10(&target10) {
            stField1 = std::make_unique<st_field_type1>(
                    this->target1->template getStencilField<std::unordered_map>(1));
            stField2 = std::make_unique<st_field_type2>(
                    this->target2->template getStencilField<std::unordered_map>(2));
            stField3 = std::make_unique<st_field_type3>(
                    this->target3->template getStencilField<std::unordered_map>(3));
            stField4 = std::make_unique<st_field_type4>(
                    this->target4->template getStencilField<std::unordered_map>(4));
            stField5 = std::make_unique<st_field_type5>(
                    this->target5->template getStencilField<std::unordered_map>(5));
            stField6 = std::make_unique<st_field_type6>(
                    this->target6->template getStencilField<std::unordered_map>(6));
            stField7 = std::make_unique<st_field_type7>(
                    this->target7->template getStencilField<std::unordered_map>(7));
            stField8 = std::make_unique<st_field_type8>(
                    this->target8->template getStencilField<std::unordered_map>(8));
            stField9 = std::make_unique<st_field_type9>(
                    this->target9->template getStencilField<std::unordered_map>(9));
            stField10 = std::make_unique<st_field_type10>(
                    this->target10->template getStencilField<std::unordered_map>(10));
        }

        template <int i>
        auto getEqnExpr() const {
            if constexpr (i == 1) {
                auto eqn = getter1(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 2) {
                auto eqn = getter2(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 3) {
                auto eqn = getter3(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 4) {
                auto eqn = getter4(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 5) {
                auto eqn = getter5(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 6) {
                auto eqn = getter6(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 7) {
                auto eqn = getter7(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 8) {
                auto eqn = getter8(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 9) {
                auto eqn = getter9(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                   *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
            if constexpr (i == 10) {
                auto eqn = getter10(*stField1, *stField2, *stField3, *stField4, *stField5, *stField6,
                                    *stField7, *stField8, *stField9, *stField10);
                auto t = eqn.lhs - eqn.rhs;
                t.prepare();
                return t;
            }
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
            if constexpr (i == 8) return target8;
            if constexpr (i == 9) return target9;
            if constexpr (i == 10) return target10;
        }
    };

    auto makeEqnHolder(auto&& func1, auto&& func2, auto&& func3, auto&& func4, auto&& func5, auto&& func6,
                       auto&& func7, auto&& func8, auto&& func9, auto&& func10, auto&& target1,
                       auto&& target2, auto&& target3, auto&& target4, auto&& target5, auto&& target6,
                       auto&& target7, auto&& target8, auto&& target9, auto&& target10) {
        return EqnHolder<
                Meta::RealType<decltype(func1(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func2(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func3(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func4(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func5(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func6(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func7(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func8(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func9(target1.template getStencilField<std::unordered_map>(),
                                              target2.template getStencilField<std::unordered_map>(),
                                              target3.template getStencilField<std::unordered_map>(),
                                              target4.template getStencilField<std::unordered_map>(),
                                              target5.template getStencilField<std::unordered_map>(),
                                              target6.template getStencilField<std::unordered_map>(),
                                              target7.template getStencilField<std::unordered_map>(),
                                              target8.template getStencilField<std::unordered_map>(),
                                              target9.template getStencilField<std::unordered_map>(),
                                              target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(func10(target1.template getStencilField<std::unordered_map>(),
                                               target2.template getStencilField<std::unordered_map>(),
                                               target3.template getStencilField<std::unordered_map>(),
                                               target4.template getStencilField<std::unordered_map>(),
                                               target5.template getStencilField<std::unordered_map>(),
                                               target6.template getStencilField<std::unordered_map>(),
                                               target7.template getStencilField<std::unordered_map>(),
                                               target8.template getStencilField<std::unordered_map>(),
                                               target9.template getStencilField<std::unordered_map>(),
                                               target10.template getStencilField<std::unordered_map>()))>,
                Meta::RealType<decltype(target1)>, Meta::RealType<decltype(target2)>,
                Meta::RealType<decltype(target3)>, Meta::RealType<decltype(target4)>,
                Meta::RealType<decltype(target5)>, Meta::RealType<decltype(target6)>,
                Meta::RealType<decltype(target7)>, Meta::RealType<decltype(target8)>,
                Meta::RealType<decltype(target9)>, Meta::RealType<decltype(target10)>>(
                func1, func2, func3, func4, func5, func6, func7, func8, func9, func10, target1, target2,
                target3, target4, target5, target6, target7, target8, target9, target10);
    }

}// namespace OpFlow

#endif