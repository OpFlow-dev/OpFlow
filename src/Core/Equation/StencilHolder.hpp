//  ----------------------------------------------------------------------------
//
//  Copyright (c) 2019 - 2022 by the OpFlow developers
//
//  This file is part of OpFlow.
//
//  OpFlow is free software and is distributed under the MPL v2.0 license.
//  The full text of the license can be found in the file LICENSE at the top
//  level directory of OpFlow.
//
//  ----------------------------------------------------------------------------
//  Note: This file is generated by script in "script/codegen.py". Modify the
//        script rather than this file if you need to.
//  ----------------------------------------------------------------------------

#ifndef OPFLOW_STENCILHOLDER_HPP
#define OPFLOW_STENCILHOLDER_HPP

#include "Core/Equation/EquationHolder.hpp"
#include "Core/Macros.hpp"
#include "DataStructures/StencilPad.hpp"

namespace OpFlow {
    template <typename... E>
    struct StencilHolder;

    template <typename E1, typename T1>
    struct StencilHolder<E1, T1> {
        T1* target1;
        E1 eqn_expr1;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 1> comm_stencils;
        constexpr static int size = 1;

        StencilHolder(E1&& e1, T1* t1) : eqn_expr1(std::move(e1)), target1(t1) { init_comm_stencils(); }

        void init_comm_stencils() { comm_stencils[0] = eqn_expr1[target1->assignableRange.center()]; }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
        }
    };

    template <typename E1, typename T1>
    auto makeStencilHolder(EqnHolder<E1, T1>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>, T1>(
                eqn.template getEqnExpr<1>(), eqn.template getTarget<1>());
    }

    template <typename E1, typename E2, typename T1, typename T2>
    struct StencilHolder<E1, E2, T1, T2> {
        T1* target1;
        T2* target2;
        E1 eqn_expr1;
        E2 eqn_expr2;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 2> comm_stencils;
        constexpr static int size = 2;

        StencilHolder(E1&& e1, E2&& e2, T1* t1, T2* t2)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), target1(t1), target2(t2) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
        }
    };

    template <typename E1, typename E2, typename T1, typename T2>
    auto makeStencilHolder(EqnHolder<E1, E2, T1, T2>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>, T1, T2>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getTarget<1>(),
                eqn.template getTarget<2>());
    }

    template <typename E1, typename E2, typename E3, typename T1, typename T2, typename T3>
    struct StencilHolder<E1, E2, E3, T1, T2, T3> {
        T1* target1;
        T2* target2;
        T3* target3;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 3> comm_stencils;
        constexpr static int size = 3;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, T1* t1, T2* t2, T3* t3)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)), target1(t1),
              target2(t2), target3(t3) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
        }
    };

    template <typename E1, typename E2, typename E3, typename T1, typename T2, typename T3>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, T1, T2, T3>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>, T1, T2, T3>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getTarget<1>(), eqn.template getTarget<2>(), eqn.template getTarget<3>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename T1, typename T2, typename T3,
              typename T4>
    struct StencilHolder<E1, E2, E3, E4, T1, T2, T3, T4> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 4> comm_stencils;
        constexpr static int size = 4;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, T1* t1, T2* t2, T3* t3, T4* t4)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), target1(t1), target2(t2), target3(t3), target4(t4) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename T1, typename T2, typename T3,
              typename T4>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, E4, T1, T2, T3, T4>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>, T1, T2, T3, T4>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getTarget<1>(), eqn.template getTarget<2>(),
                eqn.template getTarget<3>(), eqn.template getTarget<4>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename T1, typename T2,
              typename T3, typename T4, typename T5>
    struct StencilHolder<E1, E2, E3, E4, E5, T1, T2, T3, T4, T5> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        E5 eqn_expr5;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 5> comm_stencils;
        constexpr static int size = 5;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, E5&& e5, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), eqn_expr5(std::move(e5)), target1(t1), target2(t2), target3(t3),
              target4(t4), target5(t5) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
            comm_stencils[4] = eqn_expr5[target5->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
            if constexpr (i == 5) return eqn_expr5;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename T1, typename T2,
              typename T3, typename T4, typename T5>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, E4, E5, T1, T2, T3, T4, T5>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<5>())>, T1, T2, T3, T4, T5>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getEqnExpr<5>(), eqn.template getTarget<1>(),
                eqn.template getTarget<2>(), eqn.template getTarget<3>(), eqn.template getTarget<4>(),
                eqn.template getTarget<5>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename T1,
              typename T2, typename T3, typename T4, typename T5, typename T6>
    struct StencilHolder<E1, E2, E3, E4, E5, E6, T1, T2, T3, T4, T5, T6> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        E5 eqn_expr5;
        E6 eqn_expr6;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 6> comm_stencils;
        constexpr static int size = 6;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, E5&& e5, E6&& e6, T1* t1, T2* t2, T3* t3, T4* t4,
                      T5* t5, T6* t6)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), eqn_expr5(std::move(e5)), eqn_expr6(std::move(e6)), target1(t1),
              target2(t2), target3(t3), target4(t4), target5(t5), target6(t6) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
            comm_stencils[4] = eqn_expr5[target5->assignableRange.center()];
            comm_stencils[5] = eqn_expr6[target6->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
            if constexpr (i == 5) return eqn_expr5;
            if constexpr (i == 6) return eqn_expr6;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename T1,
              typename T2, typename T3, typename T4, typename T5, typename T6>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, E4, E5, E6, T1, T2, T3, T4, T5, T6>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<5>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<6>())>, T1, T2, T3, T4, T5, T6>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getEqnExpr<5>(), eqn.template getEqnExpr<6>(),
                eqn.template getTarget<1>(), eqn.template getTarget<2>(), eqn.template getTarget<3>(),
                eqn.template getTarget<4>(), eqn.template getTarget<5>(), eqn.template getTarget<6>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    struct StencilHolder<E1, E2, E3, E4, E5, E6, E7, T1, T2, T3, T4, T5, T6, T7> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        E5 eqn_expr5;
        E6 eqn_expr6;
        E7 eqn_expr7;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 7> comm_stencils;
        constexpr static int size = 7;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, E5&& e5, E6&& e6, E7&& e7, T1* t1, T2* t2, T3* t3,
                      T4* t4, T5* t5, T6* t6, T7* t7)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), eqn_expr5(std::move(e5)), eqn_expr6(std::move(e6)),
              eqn_expr7(std::move(e7)), target1(t1), target2(t2), target3(t3), target4(t4), target5(t5),
              target6(t6), target7(t7) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
            comm_stencils[4] = eqn_expr5[target5->assignableRange.center()];
            comm_stencils[5] = eqn_expr6[target6->assignableRange.center()];
            comm_stencils[6] = eqn_expr7[target7->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
            if constexpr (i == 5) return eqn_expr5;
            if constexpr (i == 6) return eqn_expr6;
            if constexpr (i == 7) return eqn_expr7;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, E4, E5, E6, E7, T1, T2, T3, T4, T5, T6, T7>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<5>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<6>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<7>())>, T1, T2, T3, T4, T5, T6,
                             T7>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getEqnExpr<5>(), eqn.template getEqnExpr<6>(),
                eqn.template getEqnExpr<7>(), eqn.template getTarget<1>(), eqn.template getTarget<2>(),
                eqn.template getTarget<3>(), eqn.template getTarget<4>(), eqn.template getTarget<5>(),
                eqn.template getTarget<6>(), eqn.template getTarget<7>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6,
              typename T7, typename T8>
    struct StencilHolder<E1, E2, E3, E4, E5, E6, E7, E8, T1, T2, T3, T4, T5, T6, T7, T8> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        T8* target8;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        E5 eqn_expr5;
        E6 eqn_expr6;
        E7 eqn_expr7;
        E8 eqn_expr8;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 8> comm_stencils;
        constexpr static int size = 8;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, E5&& e5, E6&& e6, E7&& e7, E8&& e8, T1* t1, T2* t2,
                      T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), eqn_expr5(std::move(e5)), eqn_expr6(std::move(e6)),
              eqn_expr7(std::move(e7)), eqn_expr8(std::move(e8)), target1(t1), target2(t2), target3(t3),
              target4(t4), target5(t5), target6(t6), target7(t7), target8(t8) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
            comm_stencils[4] = eqn_expr5[target5->assignableRange.center()];
            comm_stencils[5] = eqn_expr6[target6->assignableRange.center()];
            comm_stencils[6] = eqn_expr7[target7->assignableRange.center()];
            comm_stencils[7] = eqn_expr8[target8->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
            if constexpr (i == 5) return eqn_expr5;
            if constexpr (i == 6) return eqn_expr6;
            if constexpr (i == 7) return eqn_expr7;
            if constexpr (i == 8) return eqn_expr8;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
            if constexpr (i == 8) return target8;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6,
              typename T7, typename T8>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, E4, E5, E6, E7, E8, T1, T2, T3, T4, T5, T6, T7, T8>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<5>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<6>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<7>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<8>())>, T1, T2, T3, T4, T5, T6,
                             T7, T8>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getEqnExpr<5>(), eqn.template getEqnExpr<6>(),
                eqn.template getEqnExpr<7>(), eqn.template getEqnExpr<8>(), eqn.template getTarget<1>(),
                eqn.template getTarget<2>(), eqn.template getTarget<3>(), eqn.template getTarget<4>(),
                eqn.template getTarget<5>(), eqn.template getTarget<6>(), eqn.template getTarget<7>(),
                eqn.template getTarget<8>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename E9, typename T1, typename T2, typename T3, typename T4, typename T5,
              typename T6, typename T7, typename T8, typename T9>
    struct StencilHolder<E1, E2, E3, E4, E5, E6, E7, E8, E9, T1, T2, T3, T4, T5, T6, T7, T8, T9> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        T8* target8;
        T9* target9;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        E5 eqn_expr5;
        E6 eqn_expr6;
        E7 eqn_expr7;
        E8 eqn_expr8;
        E9 eqn_expr9;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 9> comm_stencils;
        constexpr static int size = 9;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, E5&& e5, E6&& e6, E7&& e7, E8&& e8, E9&& e9, T1* t1,
                      T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8, T9* t9)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), eqn_expr5(std::move(e5)), eqn_expr6(std::move(e6)),
              eqn_expr7(std::move(e7)), eqn_expr8(std::move(e8)), eqn_expr9(std::move(e9)), target1(t1),
              target2(t2), target3(t3), target4(t4), target5(t5), target6(t6), target7(t7), target8(t8),
              target9(t9) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
            comm_stencils[4] = eqn_expr5[target5->assignableRange.center()];
            comm_stencils[5] = eqn_expr6[target6->assignableRange.center()];
            comm_stencils[6] = eqn_expr7[target7->assignableRange.center()];
            comm_stencils[7] = eqn_expr8[target8->assignableRange.center()];
            comm_stencils[8] = eqn_expr9[target9->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
            if constexpr (i == 5) return eqn_expr5;
            if constexpr (i == 6) return eqn_expr6;
            if constexpr (i == 7) return eqn_expr7;
            if constexpr (i == 8) return eqn_expr8;
            if constexpr (i == 9) return eqn_expr9;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
            if constexpr (i == 8) return target8;
            if constexpr (i == 9) return target9;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename E9, typename T1, typename T2, typename T3, typename T4, typename T5,
              typename T6, typename T7, typename T8, typename T9>
    auto makeStencilHolder(
            EqnHolder<E1, E2, E3, E4, E5, E6, E7, E8, E9, T1, T2, T3, T4, T5, T6, T7, T8, T9>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<5>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<6>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<7>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<8>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<9>())>, T1, T2, T3, T4, T5, T6,
                             T7, T8, T9>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getEqnExpr<5>(), eqn.template getEqnExpr<6>(),
                eqn.template getEqnExpr<7>(), eqn.template getEqnExpr<8>(), eqn.template getEqnExpr<9>(),
                eqn.template getTarget<1>(), eqn.template getTarget<2>(), eqn.template getTarget<3>(),
                eqn.template getTarget<4>(), eqn.template getTarget<5>(), eqn.template getTarget<6>(),
                eqn.template getTarget<7>(), eqn.template getTarget<8>(), eqn.template getTarget<9>());
    }

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename E9, typename E10, typename T1, typename T2, typename T3, typename T4,
              typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
    struct StencilHolder<E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
        T1* target1;
        T2* target2;
        T3* target3;
        T4* target4;
        T5* target5;
        T6* target6;
        T7* target7;
        T8* target8;
        T9* target9;
        T10* target10;
        E1 eqn_expr1;
        E2 eqn_expr2;
        E3 eqn_expr3;
        E4 eqn_expr4;
        E5 eqn_expr5;
        E6 eqn_expr6;
        E7 eqn_expr7;
        E8 eqn_expr8;
        E9 eqn_expr9;
        E10 eqn_expr10;
        using stencil_type = typename internal::ExprTrait<E1>::elem_type;
        std::array<stencil_type, 10> comm_stencils;
        constexpr static int size = 10;

        StencilHolder(E1&& e1, E2&& e2, E3&& e3, E4&& e4, E5&& e5, E6&& e6, E7&& e7, E8&& e8, E9&& e9,
                      E10&& e10, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8, T9* t9,
                      T10* t10)
            : eqn_expr1(std::move(e1)), eqn_expr2(std::move(e2)), eqn_expr3(std::move(e3)),
              eqn_expr4(std::move(e4)), eqn_expr5(std::move(e5)), eqn_expr6(std::move(e6)),
              eqn_expr7(std::move(e7)), eqn_expr8(std::move(e8)), eqn_expr9(std::move(e9)),
              eqn_expr10(std::move(e10)), target1(t1), target2(t2), target3(t3), target4(t4), target5(t5),
              target6(t6), target7(t7), target8(t8), target9(t9), target10(t10) {
            init_comm_stencils();
        }

        void init_comm_stencils() {
            comm_stencils[0] = eqn_expr1[target1->assignableRange.center()];
            comm_stencils[1] = eqn_expr2[target2->assignableRange.center()];
            comm_stencils[2] = eqn_expr3[target3->assignableRange.center()];
            comm_stencils[3] = eqn_expr4[target4->assignableRange.center()];
            comm_stencils[4] = eqn_expr5[target5->assignableRange.center()];
            comm_stencils[5] = eqn_expr6[target6->assignableRange.center()];
            comm_stencils[6] = eqn_expr7[target7->assignableRange.center()];
            comm_stencils[7] = eqn_expr8[target8->assignableRange.center()];
            comm_stencils[8] = eqn_expr9[target9->assignableRange.center()];
            comm_stencils[9] = eqn_expr10[target10->assignableRange.center()];
        }

        template <int i>
        auto& getEqnExpr() {
            if constexpr (i == 1) return eqn_expr1;
            if constexpr (i == 2) return eqn_expr2;
            if constexpr (i == 3) return eqn_expr3;
            if constexpr (i == 4) return eqn_expr4;
            if constexpr (i == 5) return eqn_expr5;
            if constexpr (i == 6) return eqn_expr6;
            if constexpr (i == 7) return eqn_expr7;
            if constexpr (i == 8) return eqn_expr8;
            if constexpr (i == 9) return eqn_expr9;
            if constexpr (i == 10) return eqn_expr10;
        }

        template <int i>
        auto getTarget() {
            if constexpr (i == 1) return target1;
            if constexpr (i == 2) return target2;
            if constexpr (i == 3) return target3;
            if constexpr (i == 4) return target4;
            if constexpr (i == 5) return target5;
            if constexpr (i == 6) return target6;
            if constexpr (i == 7) return target7;
            if constexpr (i == 8) return target8;
            if constexpr (i == 9) return target9;
            if constexpr (i == 10) return target10;
        }
    };

    template <typename E1, typename E2, typename E3, typename E4, typename E5, typename E6, typename E7,
              typename E8, typename E9, typename E10, typename T1, typename T2, typename T3, typename T4,
              typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
    auto makeStencilHolder(EqnHolder<E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, T1, T2, T3, T4, T5, T6, T7, T8,
                                     T9, T10>& eqn) {
        return StencilHolder<Meta::RealType<decltype(eqn.template getEqnExpr<1>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<2>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<3>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<4>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<5>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<6>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<7>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<8>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<9>())>,
                             Meta::RealType<decltype(eqn.template getEqnExpr<10>())>, T1, T2, T3, T4, T5, T6,
                             T7, T8, T9, T10>(
                eqn.template getEqnExpr<1>(), eqn.template getEqnExpr<2>(), eqn.template getEqnExpr<3>(),
                eqn.template getEqnExpr<4>(), eqn.template getEqnExpr<5>(), eqn.template getEqnExpr<6>(),
                eqn.template getEqnExpr<7>(), eqn.template getEqnExpr<8>(), eqn.template getEqnExpr<9>(),
                eqn.template getEqnExpr<10>(), eqn.template getTarget<1>(), eqn.template getTarget<2>(),
                eqn.template getTarget<3>(), eqn.template getTarget<4>(), eqn.template getTarget<5>(),
                eqn.template getTarget<6>(), eqn.template getTarget<7>(), eqn.template getTarget<8>(),
                eqn.template getTarget<9>(), eqn.template getTarget<10>());
    }

}// namespace OpFlow
#endif