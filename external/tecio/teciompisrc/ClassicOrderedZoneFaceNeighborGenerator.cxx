#include "ClassicOrderedZoneFaceNeighborGenerator.h"
#include "AltTecUtil.h"
namespace tecplot { namespace ___3933 { ClassicOrderedZoneFaceNeighborGenerator::ClassicOrderedZoneFaceNeighborGenerator(___37& ___36) : FaceNeighborGeneratorAbstract(___36) {} namespace { inline int ___2883(___1844 const& ___1843) { return (___1843.i() > 1 ? 1 : 0) + (___1843.___2105() > 1 ? 1 : 0) + (___1843.___2134() > 1 ? 1 : 0); } } ___372 ClassicOrderedZoneFaceNeighborGenerator::gatherUserFaceNeighbors( std::vector<int32_t>& userFaceNeighbors, ___4636 zone) const { REQUIRE(zone >= 0); ___1292 ___1274 = ___2337.___839(zone + 1); ___3501 ___1153 = 0; ___372 ___2039 = ___2337.___4614(&___1153); if (___2039) { ___1844 ___1843; ___2337.___4615(zone + 1, ___1843); if (___2883(___1843) == 3) { int32_t const iMinFace = 1; int32_t const iMaxFace = 2; int32_t const jMinFace = 3; int32_t const jMaxFace = 4; int32_t const kMinFace = 5; int32_t const kMaxFace = 6; for(int32_t ___2105 = 0; ___2105 < static_cast<int32_t>(___1843.___2105()); ++___2105) { for(int32_t ___2134 = 0; ___2134 < static_cast<int32_t>(___1843.___2134()); ++___2134) { ___478((___2134 * ___1843.___2105() + ___2105) * ___1843.i() + 1 < std::numeric_limits<int32_t>::max()); int32_t iMinCell = static_cast<int32_t>((___2134 * ___1843.___2105() + ___2105) * ___1843.i() + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, iMinCell, iMinFace); ___478(iMinCell + ___1843.i() - 2 < std::numeric_limits<int32_t>::max()); int32_t iMaxCell = static_cast<int32_t>(iMinCell + ___1843.i() - 2); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, iMaxCell, iMaxFace); } } for(int32_t i = 0; i < static_cast<int32_t>(___1843.i()); ++i) { for(int32_t ___2134 = 0; ___2134 < static_cast<int32_t>(___1843.___2134()); ++___2134) { ___478(___2134 * ___1843.i() * ___1843.___2105() + 1 < std::numeric_limits<int32_t>::max()); int32_t jMinCell = static_cast<int32_t>(___2134 * ___1843.i() * ___1843.___2105() + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, jMinCell, jMinFace); ___478(jMinCell + (___1843.___2105() - 2) * ___1843.i() < std::numeric_limits<int32_t>::max()); int32_t jMaxCell = static_cast<int32_t>(jMinCell + (___1843.___2105() - 2) * ___1843.i()); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, jMaxCell, jMaxFace); } } for(int32_t i = 0; i < static_cast<int32_t>(___1843.i()); ++i) { for(int32_t ___2105 = 0; ___2105 < static_cast<int32_t>(___1843.___2105()); ++___2105) { ___478(___2105 * ___1843.i() + i + 1 < std::numeric_limits<int32_t>::max()); int32_t kMinCell = static_cast<int32_t>(___2105 * ___1843.i() + i + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, kMinCell, kMinFace); ___478(kMinCell + (___1843.___2134() - 2) * ___1843.i() * ___1843.___2105() < std::numeric_limits<int32_t>::max()); int32_t kMaxCell = static_cast<int32_t>(kMinCell + (___1843.___2134() - 2) * ___1843.i() * ___1843.___2105()); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, kMaxCell, kMaxFace); } } } else if (___2883(___1843) == 2) { int64_t dim1; int64_t dim2; if (___1843.i() > 1) { dim1 = ___1843.i(); if (___1843.___2105() > 1) dim2 = ___1843.___2105(); else dim2 = ___1843.___2134(); } else { dim1 = ___1843.___2105(); dim2 = ___1843.___2134(); } for(int64_t i = 0; i < dim1; ++i) { ___478(i + 1 < std::numeric_limits<int32_t>::max()); int32_t minCell = static_cast<int32_t>(i + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, minCell, 1); ___478(minCell + (dim2 - 2) * dim1 < std::numeric_limits<int32_t>::max()); int32_t maxCell = minCell + static_cast<int32_t>((dim2 - 2) * dim1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, maxCell, 3); } for(int64_t ___2105 = 0; ___2105 < dim2; ++___2105) { ___478(___2105 * dim1 + 1 < std::numeric_limits<int32_t>::max()); int32_t minCell = static_cast<int32_t>(___2105 * dim1 + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, minCell, 4); ___478(minCell + dim1 - 2 < std::numeric_limits<int32_t>::max()); int32_t maxCell = minCell + static_cast<int32_t>(dim1 - 2); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1274, ___1153, zone, maxCell, 2); } } ___2337.___3484(&___1153); } return ___2039; } }}
