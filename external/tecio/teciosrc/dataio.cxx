#include "stdafx.h"
#include "MASTER.h"
 #define ___857
#include "GLOBAL.h"
#include "TASSERT.h"
#include "Q_UNICODE.h"
#include "TranslatedString.h"
#include "TecplotVersion.h"
#include "Version.h"
 #if defined ENABLE_ORPHANED_DATASETS
#include "ZoneNumberByUniqueIdCache.h"
 #endif
 #if defined MSWIN
 #pragma warning (disable : 4244)
 #endif
static ___1632 TempGeom; static ___4118 TempText; using namespace tecplot;
#include "DATASET0.h"
#include "SET.h"
#include "FILESTREAM.h"
#include "DATAIO.h"
#include "DATAIO4.h"
#include "STRUTIL.h"
#include "AUXDATA.h"
#include "ARRLIST.h"
#include "STRLIST.h"
#include "ALLOC.h"
#include "DATASET.h"
#include "SYSTEM.h"
#include "Q_MSG.h"
#include "FileSystem.h"
___372 ___3279(___1405    *___1401, short            ___2104, ___372        ASSERT_ONLY(___3568), ___1172      *___2847, ___1172      *NumVars, int32_t     *___2792, char           **___903, ___4118         **___340, ___1632         **___336, ___3839  **___791, ___3839   *___4285, ___264      *___886, ___90       ___263, ___3501         **___2075, ___372       *___1821, ___372       *___1820, ___134    *___4682, ___3839   *___4366, ___134    *___4338, ___3501          *___2053, ___2227      **___1441, DataFileType_e  *___1408) { ___372    ___2040 = ___4226; ___372    SentError = ___1305; double       ___4567=0; int          Pass; ___1398 InitialFilePosition; REQUIRE(VALID_REF(___1401) && VALID_REF(___1401->File)); REQUIRE(___2104 > 0); REQUIRE(VALID_BOOLEAN(___3568)); REQUIRE(VALID_REF(___2847)); REQUIRE(VALID_REF(NumVars)); REQUIRE(VALID_REF(___903)       || (___903 == NULL)); REQUIRE(VALID_REF(___340)           || (___340 == NULL)); REQUIRE(VALID_REF(___336)           || (___336 == NULL)); REQUIRE(VALID_REF(___1821)            || (___1821 == NULL)); REQUIRE(VALID_REF(___1820)           || (___1820 == NULL)); REQUIRE(VALID_REF(___4682)       || (___4682 == NULL)); REQUIRE(VALID_REF(___4366)           || (___4366 == NULL)); REQUIRE(VALID_REF(___2792) || (___2792 == NULL)); REQUIRE(VALID_REF(___4285)            || (___4285 == NULL)); REQUIRE((VALID_REF(___886) && (VALID_REF(*___886) || *___886 == NULL)) || ___886 == NULL); REQUIRE((VALID_REF(___4338) && (VALID_REF(*___4338) || *___4338 == NULL)) || ___4338 == NULL); REQUIRE(VALID_REF(___2075)  || (___2075 == NULL)); REQUIRE((VALID_REF(___791) && VALID_REF(___2792)) || (___791 == NULL)); REQUIRE(VALID_REF(___2053) || (___2053 == NULL)); REQUIRE(VALID_REF(___1441)  || (___1441 == NULL)); REQUIRE(VALID_REF(___1408)         || (___1408 == NULL));
 #if !defined TECPLOTKERNEL
___2227 const maxTextLength = 200; TempText.Text = ___23(maxTextLength + 1, char, "Scratch string space for Text string"); ___2040 = (TempText.Text != NULL);
 #else
___2227 const maxTextLength = ___1547.___2241.MaxChrsInTextLabels;
 #endif
if (___903) *___903 = NULL; if (___340) *___340 = NULL; if (___336) *___336 = NULL; if (___1821) *___1821 = ___1305; if (___1820) *___1820 = ___1305; if (___4682) *___4682 = NULL; if (___4366) *___4366 = NULL; if (___2792) *___2792 = 0; if (___791) *___791 = NULL; if (___886 != NULL) { ___478(VALID_REF(*___886) || *___886 == NULL); } if (___4338 != NULL) { ___478(VALID_REF(*___4338) || *___4338 == NULL); } if (___4285) *___4285 = NULL; if (___2075) *___2075 = NULL; if (___2053) *___2053 = NULL; if (___1441) *___1441 = NULL; if (___1408) *___1408 = ___845; InitialFilePosition = ___4201(___1401->File); for (Pass = 1; ___2040 && (Pass <= 2); Pass++) { if (Pass == 2) { if (___4200(___1401->File, InitialFilePosition, SEEK_SET) != 0) ___2040 = ___1305; if (___2040 && (*___2847 > 0 && ___4682 != NULL && *___4682 == NULL)) { *___4682 = ArrayListAlloc(*___2847, ArrayListType_VoidPtr, ___4668, 0); ___2040 = (*___4682 != NULL); } if (___2040 && (___791 != NULL    && *___791 == NULL && *___2792 > 0)) { *___791 = ___23(*___2792, ___3839, "CustomLabel Sets"); ___2040 = (*___791 != NULL); if (___2040) { int32_t N; for (N = 0; N < *___2792; N++) (*___791)[N] = NULL; } } if (___2040 && (___4285 != NULL && *___4285 == NULL)) { *___4285 = ___3821(); ___2040 = (___372)(*___4285 != NULL); } if (___2040 && (___886 != NULL && *___886 == NULL)) { *___886 = ___231(___263); ___2040 = (___372)(*___886 != NULL); } if (___2040 && (___4338 != NULL && *___4338 == NULL) && *NumVars > 0) { *___4338 = ArrayListAlloc(0, ArrayListType_VoidPtr, ___4668, 0); ___2040 = (*___4338 != NULL && ___170(*___4338, *NumVars - 1, NULL)); } if (___2040            && (*___2847 > 0) && (___2075 != NULL) && (*___2075 == NULL)) { *___2075 = ___23(*___2847, ___3501, "Array of IsVarCellCentered sets"); if (*___2075) { ___1172 Z; for (Z = 0; ___2040 && (Z < *___2847); Z++) { (*___2075)[Z] = ___29(___1305); ___2040 = (___372)((*___2075)[Z] != NULL); } } else ___2040 = ___1305; } if (___2040 && *___2847 > 0 && ___2053 != NULL) { *___2053 = ___29(___1305); ___2040 = (*___2053 != NULL); } if (___2040 && *___2847 > 0 && ___1441 != NULL) { *___1441 = ___23(*___2847, ___2227, "Array of FNNumBndryConns"); ___2040 = (*___1441 != NULL); if (___2040) for (___2227 i = 0; i < *___2847; i++) (*___1441)[i] = 0; } } if (___2792 != NULL) *___2792 = 0; ___1172 TotalNumZones = *___2847; *___2847 = 0; *NumVars  = 0; if (___2040) { char *S = NULL; int  INumVars; ___2040 = ___3287(___1401, ___2104, ((Pass == 2) ? &S : (char **)NULL), ((Pass == 2) ? ___1408 : (DataFileType_e *)NULL), &INumVars, ((Pass == 2) ? ___4366 : (___3839 *)NULL)); if (___2040) *NumVars = (___1172)INumVars; if ((Pass == 2) && S && ___2040 && ___903) *___903 = S; else if (S != NULL) ___1530(S, "data set title"); } if (___2040) { if (___2040) ___4567 = ___1762(___1401, FieldDataType_Float, 0.0, 1000.0, &___2040); while (___2040 && (___4567 != EndHeaderMarker)) { if (___4567 == ___4649) { ___4683 *___4677 = ___4678(); ___372 ___2868 = (Pass == 2 && ___2075 != NULL); ___2040 = (___4677 != NULL); if (___2040) { ___372 LocalIsRawFNAvailable; ___2227 LocalFNNumBndryConns; ___2040 = ___3295(___1401, ___2104, ___4677, ___2868 ? (*___2075)[*___2847] : NULL, *NumVars, ___263, &LocalIsRawFNAvailable, &LocalFNNumBndryConns); if (___2040 && ___2868 && ___2053 != NULL) { if (LocalIsRawFNAvailable) ___2040 = ___17(*___2053, *___2847, ___1305); } if (___2040 && ___2868 && ___1441 != NULL) (*___1441)[*___2847] = LocalFNNumBndryConns; } if (___2040                 && ___4682 != NULL && Pass == 2) { ___2040 = (___4677->___2975 == ___333 || (___4677->___2975 != *___2847 && (0 <= ___4677->___2975 && ___4677->___2975 < TotalNumZones))); if (___2040) { ArrayListItem_u CurZoneSpecItem; CurZoneSpecItem.___4440 = (void *)___4677; ArrayListSetItem(*___4682, *___2847, CurZoneSpecItem, ___4681, 0); } else { if (___4677->___2975 == *___2847) ___1177(___4217("Parent zone assignment for zone %d " "may not be self referencing."), *___2847 + 1); else ___1177(___4217("Parent zone assignment for zone %d " "must be to an existing zone within the datafile."), *___2847 + 1); ___4679(&___4677); SentError = ___4226; } } else ___4679(&___4677); if (___2040) (*___2847)++; if (*___2847 > ___2382) { ___1177(___4217("Exceeding Tecplot's current zone limit of %d. "
"Reduce the number of zones being loaded."), ___2382); ___2040 = ___1305; SentError = ___4226; } } else if (___4567 == ___1617) { ___2040 = ___3288(___1401, ___2104, ___1305, &TempGeom, 5000); if (___2040) { if (Pass == 1) { if (___1820) *___1820 = ___4226; } } } else if (___4567 == ___4112) { ___2040 = ___3293(___1401, ___2104, ___1305, &TempText, maxTextLength); if (___2040) { if (Pass == 1) { if (___1821) *___1821 = ___4226; } } } else if (___4567 == ___792) { ___372 ___2868; ___2868 = (Pass == 2)                                && ___2792                         && (*___2792 < ___2365) && ___791; ___2040 = ___3286(___1401, ___2104, ___2868, (___2868 ? &(*___791)[*___2792] : NULL)); if (___2040 && ___2792) (*___2792)++; } else if (___4567 == ___4286) { ___372 ___2868; char     *CurUserRec = NULL; ___2868 = (___372)((Pass == 2) && ___4285); ___2040 = ___3294(___1401, ___2104, ___2868 ? &CurUserRec : (char **)NULL); if (___2040 && ___2868) ___2040 = ___3823(*___4285, CurUserRec); if (CurUserRec) ___1530(CurUserRec, "temp user rec"); CurUserRec = NULL; } else if (___4567 == ___887) { ___372 ___2868; ___478(___2104 >= 101); ___2868 = (Pass == 2 && ___886 != NULL); ___2040 = ___3285(___1401, ___2104, ___2868 ? *___886 : NULL); if (!___2040) { ___1177(___4217("Invalid DATASETAUXDATA record in binary datafile")); SentError = ___4226; } } else if (___4567 == ___4339) { ___372 ___2868; ___2227 ___4369; ___478(___2104 >= 102); ___2868 = (Pass == 2 && ___4338 != NULL); ___4369 = ___1750<int32_t>(___1401, ___2104, 0, *NumVars-1, &___2040); if (___2040) { ___264 VarAuxData; if (___2868) { VarAuxData = (___264)___133(*___4338, ___4369); if (VarAuxData == NULL) { VarAuxData = ___231(___263); ___2040 = (VarAuxData != NULL && ___170(*___4338, ___4369, VarAuxData)); } } else VarAuxData = NULL; ___2040 = ___2040 && ___3285(___1401, ___2104, VarAuxData); if (!___2040) { ___1177(___4217("Invalid VARAUXDATA record in binary datafile")); SentError = ___4226; } } else { ___1177(___4217("Invalid VARAUXDATA variable number association")); SentError = ___4226; } } else ___2040 = ___1305; if (___2040) ___4567 = ___1762(___1401, FieldDataType_Float, 0.0, 1000.0, &___2040); } } } if (___2040 && (*___2847 == 0) && (*NumVars > 0)) { *NumVars = 0; if (___4366 && *___4366) { ___3828(___4366); } } if (!___2040) { if (___4682 && *___4682) ArrayListDealloc(___4682, ___4681, 0); if (___903 && *___903) { ___1530(*___903, "DataSetTitle"); *___903 = NULL; } if (___4366 && *___4366) { ___3828(___4366); } if (___4285 && *___4285) ___3828(___4285); } if ((___886 != NULL && *___886 != NULL) && (!___2040)) ___236(___886); if (!___2040 && !SentError) ___1177(___4217("Invalid header in binary datafile")); ENSURE((___4366 == NULL) || (*___4366 == NULL) || ___3848(*___4366)); ENSURE(IMPLICATION(___4285 != NULL, (*___4285 == NULL || ___3848(*___4285)))); ENSURE(IMPLICATION(___886 != NULL, (*___886 == NULL || VALID_REF(*___886)))); return (___2040); } ___372 ___2876(___1405 **___1401, char          *___1439, ___1398   ___3686, int32_t       *___2104) { ___372 ___3359 = ___4226; REQUIRE(VALID_REF(___1401)); REQUIRE(*___1401 == NULL); REQUIRE(VALID_REF(___1439)); REQUIRE(___3686 >= 0); REQUIRE(VALID_REF(___2104)); FILE *File = tecplot::filesystem::fileOpen(___1439, "rb"); if (File == NULL) ___3359 = ___1305; if (___3359) { *___1401 = ___1402(File, ___4226); ___3359 = (*___1401 != NULL); } ___3359 = ___3359 && (___4200((*___1401)->File, ___3686, SEEK_SET) == 0); if (___3359) { *___2104 = ___1749(*___1401); ___3359 = ( (40 <= *___2104 && *___2104 <=  71) || (*___2104 ==  75)                    || (100 <= *___2104 && *___2104 <= TecplotSDKBinaryFileVersion)); ___478(TecplotSDKBinaryFileVersion == 112); } ENSURE(VALID_BOOLEAN(___3359)); return (___3359); }
