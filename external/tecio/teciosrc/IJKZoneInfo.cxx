#include "SzlFileLoader.h"
#include "IJKZoneInfo.h"
namespace tecplot { namespace ___3933 { ___1844 const ___1881::ijkCornerOffset[NUM_IJK_CELL_CORNERS] = { ___1844(0, 0, 0), ___1844(1, 0, 0), ___1844(1, 1, 0), ___1844(0, 1, 0), ___1844(0, 0, 1), ___1844(1, 0, 1), ___1844(1, 1, 1), ___1844(0, 1, 1) }; ___1844 const ___1881::ijkFaceNeighborOffset[NUM_IJK_CELL_FACES] = { ___1844((___81)-1, (___81)0, (___81)0), ___1844((___81)1, (___81)0, (___81)0), ___1844((___81)0, (___81)-1, (___81)0), ___1844((___81)0, (___81)1, (___81)0), ___1844((___81)0, (___81)0, (___81)-1), ___1844((___81)0, (___81)0, (___81)1) }; ___372 ___1881::getNodeSubzonesInRange( ___1844 const& nodeIJKStart, ___1844 const& nodeIJKEnd, ___3269<___2090::SubzoneAddress>& refNszAddresses) const { REQUIRE(nodeIJKStart <= nodeIJKEnd); REQUIRE(refNszAddresses.empty()); ___372 ___2039 = ___4226; try { refNszAddresses.reserve(NUM_IJK_CELL_CORNERS); refNszAddresses.___3503(NUM_IJK_CELL_CORNERS); ___2090::SubzoneAddress* ___1121 = &refNszAddresses[0]; ___1121[0] = nodeAddressAtNodeIJK(nodeIJKStart).subzoneAddress(); ___1121[1] = nodeAddressAtNodeIJK(___1844(nodeIJKEnd.i(), nodeIJKStart.___2105(), nodeIJKStart.___2134())).subzoneAddress(); ___1121[2] = nodeAddressAtNodeIJK(___1844(nodeIJKStart.i(), nodeIJKEnd.___2105(), nodeIJKStart.___2134())).subzoneAddress(); ___1121[3] = nodeAddressAtNodeIJK(___1844(nodeIJKEnd.i(), nodeIJKEnd.___2105(), nodeIJKStart.___2134())).subzoneAddress(); ___1121[4] = nodeAddressAtNodeIJK(___1844(nodeIJKStart.i(), nodeIJKStart.___2105(), nodeIJKEnd.___2134())).subzoneAddress(); ___1121[5] = nodeAddressAtNodeIJK(___1844(nodeIJKEnd.i(), nodeIJKStart.___2105(), nodeIJKEnd.___2134())).subzoneAddress(); ___1121[6] = nodeAddressAtNodeIJK(___1844(nodeIJKStart.i(), nodeIJKEnd.___2105(), nodeIJKEnd.___2134())).subzoneAddress(); ___1121[7] = nodeAddressAtNodeIJK(nodeIJKEnd).subzoneAddress(); ___682 numRefNszs; if (___1121[0] != ___1121[1]) { ___478(___1121[2] != ___1121[3] && ___1121[4] != ___1121[5] && ___1121[6] != ___1121[7]); if (___1121[0] != ___1121[2]) { ___478(___1121[1] != ___1121[3] && ___1121[4] != ___1121[6] && ___1121[5] != ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); numRefNszs = 8; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3] && ___1121[3] < ___1121[4] && ___1121[4] < ___1121[5] && ___1121[5] < ___1121[6] && ___1121[6] < ___1121[7]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); numRefNszs = 4; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3]); } } else { ___478(___1121[1] == ___1121[3] && ___1121[4] == ___1121[6] && ___1121[5] == ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); ___1121[2] = ___1121[4]; ___1121[3] = ___1121[5]; numRefNszs = 4; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); numRefNszs = 2; ___478(___1121[0] < ___1121[1]); } } } else { ___478(___1121[2] == ___1121[3] && ___1121[4] == ___1121[5] && ___1121[6] == ___1121[7]); if (___1121[0] != ___1121[2]) { ___478(___1121[1] != ___1121[3] && ___1121[4] != ___1121[6] && ___1121[5] != ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); ___1121[1] = ___1121[2]; ___1121[2] = ___1121[4]; ___1121[3] = ___1121[6]; numRefNszs = 4; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); ___1121[1] = ___1121[2]; numRefNszs = 2; ___478(___1121[0] < ___1121[1]); } } else { ___478(___1121[1] == ___1121[3] && ___1121[4] == ___1121[6] && ___1121[5] == ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); ___1121[1] = ___1121[4]; numRefNszs = 2; ___478(___1121[0] < ___1121[1]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); numRefNszs = 1; } } } ___478(numRefNszs > 0); refNszAddresses.___3503(numRefNszs); } catch (...) { ___2039 = ___1186("Out of memory getting referenced node subzones for a cell subzone in ordered zone"); } ENSURE(VALID_BOOLEAN(___2039)); ENSURE(IMPLICATION(___2039, !refNszAddresses.empty())); ENSURE(IMPLICATION(___2039, isSorted(refNszAddresses.begin(), refNszAddresses.end()))); ENSURE(IMPLICATION(___2039, validNszAddress(refNszAddresses[refNszAddresses.size()-1]))); return ___2039; } ___372 ___1881::getCszReferencedNszs( ___2090::SubzoneAddress            cszAddress, ___3269<___2090::SubzoneAddress>& refNszAddresses) const { REQUIRE(validCszAddress(cszAddress)); REQUIRE(refNszAddresses.empty()); ___1844 const nodeIJKStart = ___690(cszAddress.subzoneOffset()); ___1844 const nodeIJKEnd = (___689(cszAddress.subzoneOffset()) + 1).minOp(___2199()); ___372 ___2039 = getNodeSubzonesInRange(nodeIJKStart, nodeIJKEnd, refNszAddresses); ENSURE(VALID_BOOLEAN(___2039)); ENSURE(IMPLICATION(___2039, !refNszAddresses.empty())); ENSURE(IMPLICATION(___2039, isSorted(refNszAddresses.begin(), refNszAddresses.end()))); ENSURE(IMPLICATION(___2039, validNszAddress(refNszAddresses[refNszAddresses.size()-1]))); return ___2039; } ___372 ___1881::getCellSubzonesInRange( ___1844 const& cellIJKStart, ___1844 const& cellIJKEnd, ___3269<___2090::SubzoneAddress>& refCszAddresses) const { REQUIRE(cellIJKStart <= cellIJKEnd); REQUIRE(refCszAddresses.empty()); ___372 ___2039 = ___4226;
try { refCszAddresses.reserve(NUM_IJK_CELL_CORNERS); refCszAddresses.___3503(NUM_IJK_CELL_CORNERS); ___2090::SubzoneAddress* ___1121 = &refCszAddresses[0]; ___1121[0] = cellAddressAtCellIJK(cellIJKStart).subzoneAddress(); ___1121[1] = cellAddressAtCellIJK(___1844(cellIJKEnd.i(), cellIJKStart.___2105(), cellIJKStart.___2134())).subzoneAddress(); ___1121[2] = cellAddressAtCellIJK(___1844(cellIJKStart.i(), cellIJKEnd.___2105(), cellIJKStart.___2134())).subzoneAddress(); ___1121[3] = cellAddressAtCellIJK(___1844(cellIJKEnd.i(), cellIJKEnd.___2105(), cellIJKStart.___2134())).subzoneAddress(); ___1121[4] = cellAddressAtCellIJK(___1844(cellIJKStart.i(), cellIJKStart.___2105(), cellIJKEnd.___2134())).subzoneAddress(); ___1121[5] = cellAddressAtCellIJK(___1844(cellIJKEnd.i(), cellIJKStart.___2105(), cellIJKEnd.___2134())).subzoneAddress(); ___1121[6] = cellAddressAtCellIJK(___1844(cellIJKStart.i(), cellIJKEnd.___2105(), cellIJKEnd.___2134())).subzoneAddress(); ___1121[7] = cellAddressAtCellIJK(cellIJKEnd).subzoneAddress(); ___682 numRefCszs; if (___1121[0] != ___1121[1]) { ___478(___1121[2] != ___1121[3] && ___1121[4] != ___1121[5] && ___1121[6] != ___1121[7]); if (___1121[0] != ___1121[2]) { ___478(___1121[1] != ___1121[3] && ___1121[4] != ___1121[6] && ___1121[5] != ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); numRefCszs = 8; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3] && ___1121[3] < ___1121[4] && ___1121[4] < ___1121[5] && ___1121[5] < ___1121[6] && ___1121[6] < ___1121[7]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); numRefCszs = 4; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3]); } } else { ___478(___1121[1] == ___1121[3] && ___1121[4] == ___1121[6] && ___1121[5] == ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); ___1121[2] = ___1121[4]; ___1121[3] = ___1121[5]; numRefCszs = 4; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); numRefCszs = 2; ___478(___1121[0] < ___1121[1]); } } } else { ___478(___1121[2] == ___1121[3] && ___1121[4] == ___1121[5] && ___1121[6] == ___1121[7]); if (___1121[0] != ___1121[2]) { ___478(___1121[1] != ___1121[3] && ___1121[4] != ___1121[6] && ___1121[5] != ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); ___1121[1] = ___1121[2]; ___1121[2] = ___1121[4]; ___1121[3] = ___1121[6]; numRefCszs = 4; ___478(___1121[0] < ___1121[1] && ___1121[1] < ___1121[2] && ___1121[2] < ___1121[3]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); ___1121[1] = ___1121[2]; numRefCszs = 2; ___478(___1121[0] < ___1121[1]); } } else { ___478(___1121[1] == ___1121[3] && ___1121[4] == ___1121[6] && ___1121[5] == ___1121[7]); if (___1121[0] != ___1121[4]) { ___478(___1121[1] != ___1121[5] && ___1121[2] != ___1121[6] && ___1121[3] != ___1121[7]); ___1121[1] = ___1121[4]; numRefCszs = 2; ___478(___1121[0] < ___1121[1]); } else { ___478(___1121[1] == ___1121[5] && ___1121[2] == ___1121[6] && ___1121[3] == ___1121[7]); numRefCszs = 1; } } } ___478(numRefCszs > 0); refCszAddresses.___3503(numRefCszs); } catch (...) { ___2039 = ___1186("Out of memory getting referenced cell subzones for a cell subzone in ordered zone"); } ENSURE(VALID_BOOLEAN(___2039)); ENSURE(IMPLICATION(___2039, !refCszAddresses.empty())); ENSURE(IMPLICATION(___2039, isSorted(refCszAddresses.begin(), refCszAddresses.end()))); ENSURE(IMPLICATION(___2039, validCszAddress(refCszAddresses[refCszAddresses.size()-1]))); return ___2039; } ___372 ___1881::getNszReferencedCszs( ___2090::SubzoneAddress            nszAddress, ___3269<___2090::SubzoneAddress>& refCszAddresses) const { REQUIRE(validNszAddress(nszAddress)); REQUIRE(refCszAddresses.empty()); ___1844 const cellIJKStart = ___2761(nszAddress.subzoneOffset()).maxOp(1)-1; ___1844 const cellIJKEnd = ___2760(nszAddress.subzoneOffset()).minOp(m_cszInfo.ijkLastIndex()); ___372 ___2039 = getCellSubzonesInRange(cellIJKStart, cellIJKEnd, refCszAddresses); ENSURE(VALID_BOOLEAN(___2039)); ENSURE(IMPLICATION(___2039, !refCszAddresses.empty())); ENSURE(IMPLICATION(___2039, isSorted(refCszAddresses.begin(), refCszAddresses.end()))); ENSURE(IMPLICATION(___2039, validCszAddress(refCszAddresses[refCszAddresses.size()-1]))); return ___2039; } ___465 ___1881::getCellsAroundNodeIJK( ___1844 const& nodeIJK, ___3269<___2090>& adjacentCells) const { adjacentCells.reserve(NUM_IJK_CELL_CORNERS); adjacentCells.___3503(NUM_IJK_CELL_CORNERS); ___1844 const cellIJKm = nodeIJK.maxOp(1) - 1; ___1844 const cellIJKp = nodeIJK.minOp(m_cszInfo.ijkLastIndex()); ___465 numAdjCells; adjacentCells[0] = m_cszInfo.itemAddressAtItemIJK(cellIJKm); if (cellIJKm.i() != cellIJKp.i()) { adjacentCells[1] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKp.i(), cellIJKm.___2105(), cellIJKm.___2134())); if (cellIJKm.___2105() != cellIJKp.___2105()) { adjacentCells[2] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKm.i(), cellIJKp.___2105(), cellIJKm.___2134())); adjacentCells[3] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKp.i(), cellIJKp.___2105(), cellIJKm.___2134())); if (cellIJKm.___2134() != cellIJKp.___2134()) { adjacentCells[4] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKm.i(), cellIJKm.___2105(), cellIJKp.___2134())); adjacentCells[5] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKp.i(), cellIJKm.___2105(), cellIJKp.___2134())); adjacentCells[6] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKm.i(), cellIJKp.___2105(), cellIJKp.___2134()));
adjacentCells[7] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 8; } else { ___478(cellIJKp == ___1844(cellIJKp.i(), cellIJKp.___2105(), cellIJKm.___2134())); numAdjCells = 4; } } else { if (cellIJKm.___2134() != cellIJKp.___2134()) { adjacentCells[2] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKm.i(), cellIJKm.___2105(), cellIJKp.___2134())); ___478(cellIJKp == ___1844(cellIJKp.i(), cellIJKm.___2105(), cellIJKp.___2134())); adjacentCells[3] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 4; } else { ___478(cellIJKp == ___1844(cellIJKp.i(), cellIJKm.___2105(), cellIJKm.___2134())); numAdjCells = 2; } } } else { if (cellIJKm.___2105() != cellIJKp.___2105()) { adjacentCells[1] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKm.i(), cellIJKp.___2105(), cellIJKm.___2134())); if (cellIJKm.___2134() != cellIJKp.___2134()) { adjacentCells[2] = m_cszInfo.itemAddressAtItemIJK(___1844(cellIJKm.i(), cellIJKm.___2105(), cellIJKp.___2134())); ___478(cellIJKp == ___1844(cellIJKm.i(), cellIJKp.___2105(), cellIJKp.___2134())); adjacentCells[3] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 4; } else { ___478(cellIJKp == ___1844(cellIJKm.i(), cellIJKp.___2105(), cellIJKm.___2134())); numAdjCells = 2; } } else { if (cellIJKm.___2134() != cellIJKp.___2134()) { ___478(cellIJKp == ___1844(cellIJKm.i(), cellIJKm.___2105(), cellIJKp.___2134())); adjacentCells[1] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 2; } else { ___478(cellIJKp == cellIJKm); numAdjCells = 1; } } } adjacentCells.___3503(numAdjCells); ENSURE(numAdjCells > 0 && numAdjCells <= NUM_IJK_CELL_CORNERS);
 #ifndef NO_ASSERTS
for (___465 adjCell = 0; adjCell < numAdjCells; adjCell++) { ENSURE(validCellAddress(adjacentCells[adjCell])); if (adjCell > 0) { ___465 const adjCellIndexM = m_cszInfo.itemIndexAtItemAddress(adjacentCells[adjCell - 1]); ___465 const adjCellIndexP = m_cszInfo.itemIndexAtItemAddress(adjacentCells[adjCell]); ENSURE(adjCellIndexM < adjCellIndexP); } }
 #endif
return numAdjCells; } }}
